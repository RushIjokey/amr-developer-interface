window.ROSLIB = {
  Ros: function(options) {
    this.url = options.url || 'ws://localhost:9090';
    this.isConnected = false;
    this.socket = null;
    this.onConnection = null;
    this.onError = null;
    this.onClose = null;
    
    this.connect = function() {
      try {
        console.log('嘗試連接到:', this.url);
        this.socket = new WebSocket(this.url);
        
        this.socket.onopen = () => {
          console.log('WebSocket 連接成功');
          this.isConnected = true;
          if (this.onConnection) this.onConnection();
        };
        
        this.socket.onerror = (error) => {
          console.log('WebSocket 連接錯誤:', error);
          this.isConnected = false;
          if (this.onError) this.onError(error);
        };
        
        this.socket.onclose = () => {
          console.log('WebSocket 連接關閉');
          this.isConnected = false;
          if (this.onClose) this.onClose();
        };
        
        this.socket.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data);
            if (this.onMessage) this.onMessage(data);
          } catch (e) {
            console.log('解析訊息錯誤:', e);
          }
        };
        
      } catch (error) {
        console.log('建立 WebSocket 錯誤:', error);
        if (this.onError) this.onError(error);
      }
    };
    
    this.close = function() {
      if (this.socket) {
        this.socket.close();
        this.isConnected = false;
      }
    };
    
    this.on = function(event, callback) {
      if (event === 'connection') this.onConnection = callback;
      if (event === 'error') this.onError = callback;
      if (event === 'close') this.onClose = callback;
    };
  },
  
  Topic: function(options) {
    this.ros = options.ros;
    this.name = options.name;
    this.messageType = options.messageType;
    this.isAdvertised = false;
    this.subscribers = [];
    
    this.advertise = function() {
      if (this.ros && this.ros.socket && this.ros.isConnected && !this.isAdvertised) {
        const msg = {
          op: 'advertise',
          topic: this.name,
          type: this.messageType
        };
        this.ros.socket.send(JSON.stringify(msg));
        this.isAdvertised = true;
        console.log('話題已發布:', this.name);
      }
    };
    
    this.publish = function(message) {
      if (this.ros && this.ros.socket && this.ros.isConnected) {
        if (!this.isAdvertised) {
          this.advertise();
        }
        
        const msg = {
          op: 'publish',
          topic: this.name,
          msg: message
        };
        this.ros.socket.send(JSON.stringify(msg));
        console.log('發布訊息到', this.name, ':', message);
      } else {
        console.log('無法發布訊息，ROS 未連接');
      }
    };
    
    this.subscribe = function(callback) {
      if (this.ros && this.ros.socket && this.ros.isConnected) {
        const msg = {
          op: 'subscribe',
          topic: this.name,
          type: this.messageType
        };
        this.ros.socket.send(JSON.stringify(msg));
        
        // 儲存回調函數
        this.subscribers.push(callback);
        
        // 設置訊息處理
        const oldOnMessage = this.ros.onMessage;
        this.ros.onMessage = (data) => {
          if (oldOnMessage) oldOnMessage(data);
          
          if (data.op === 'publish' && data.topic === this.name) {
            this.subscribers.forEach(cb => cb(data.msg));
          }
        };
        
        console.log('訂閱話題:', this.name);
      }
    };
    
    this.unsubscribe = function() {
      if (this.ros && this.ros.socket && this.ros.isConnected) {
        const msg = {
          op: 'unsubscribe',
          topic: this.name
        };
        this.ros.socket.send(JSON.stringify(msg));
        this.subscribers = [];
        console.log('取消訂閱話題:', this.name);
      }
    };
  },
  
  Service: function(options) {
    this.ros = options.ros;
    this.name = options.name;
    this.serviceType = options.serviceType;
    
    this.callService = function(request, callback) {
      if (this.ros && this.ros.socket && this.ros.isConnected) {
        const msg = {
          op: 'call_service',
          service: this.name,
          args: request || {},
          id: 'service_call_' + Date.now()
        };
        
        // 設置回調處理
        const oldOnMessage = this.ros.onMessage;
        this.ros.onMessage = (data) => {
          if (oldOnMessage) oldOnMessage(data);
          
          if (data.op === 'service_response' && data.id === msg.id) {
            if (callback) callback(data.values);
          }
        };
        
        this.ros.socket.send(JSON.stringify(msg));
        console.log('呼叫服務:', this.name, request);
      }
    };
  },
  
  Message: function(data) {
    if (data && typeof data === 'object') {
      Object.assign(this, data);
    }
  },
  
  ServiceRequest: function(data) {
    if (data && typeof data === 'object') {
      Object.assign(this, data);
    }
  }
};

console.log('ROSLIB 已載入');